const nbSensors = 10;

node Tank
    state level: [0, nbSensors];
    init level = nbSensors / 2;
    flow input: [0,4];
        output: [0,2];
    event time;
    trans
        input > output |- time -> level := level + 1;
        input < output |- time -> level := level-1;
        (input = output) and (input = 0) |- time ->;
        (input = output) and (input > 0) |- time -> level := level + 1;
        (input = output) and (input > 0) |- time ->;
        (input = output) and (input > 0) |- time -> level := level - 1;
        (input > output) and (level = nbSensors) |- time ->;
        (input < output) and (level = 0) |- time ->;
edon


node CanalisationAmont
edon


node CanalisationAval
edon



node Valve
    state
        rate: [0,2]: public;
        broken: bool;
    init
        rate = 0;
        broken = false;
    event inc, dec;
    trans
        not broken |- inc -> rate := rate + 1;
        not broken |- dec -> rate := rate - 1;
edon

node Controler
    flow rate : [0,2][3];
edon

node System
    sub C: Controler;
        T: Tank;
        V: Valve[3]; // 0 et 1 amont et 2 aval
    assert
        T.input = (V[0].rate + V[1].rate);
        T.output = V[2].rate;
    state ctrl: bool; init ctrl := true;
    event cmd, time;
    trans 
        ctrl |- cmd -> ctrl := false; 
        ctrl |- time -> ctrl := true;
    sync
        <cmd, V[0].dec, V[1].dec, V[2].inc>;
        <cmd, V[0].dec, V[1].dec, V[2].dec>;
        <cmd, V[0].dec, V[1].dec>;
        <cmd, V[0].dec, V[1].inc, V[2].dec>;
        <cmd, V[0].dec, V[1].inc, V[2].inc>;
        <cmd, V[0].dec, V[1].inc>;
        <cmd, V[0].dec, V[2].dec>;
        <cmd, V[0].dec, V[2].inc>;
        <cmd, V[0].inc>;
        <cmd, V[0].inc, V[1].dec, V[2].dec>;
        <cmd, V[0].inc, V[1].dec, V[2].inc>;
        <cmd, V[0].inc, V[1].dec>;
        <cmd, V[0].inc, V[1].inc, V[2].dec>;
        <cmd, V[0].inc, V[1].inc, V[2].inc>;
        <cmd, V[0].inc, V[2].dec>;
        <cmd, V[0].inc, V[2].inc>;
        <cmd, V[0].inc>;
        <cmd, V[1].dec, V[2].dec>;
        <cmd, V[1].dec, V[2].inc>;
        <cmd, V[1].dec>;
        <cmd, V[1].inc, V[2].dec>;
        <cmd, V[1].inc, V[2].inc>;
        <cmd, V[1].inc>;
        <cmd, V[2].dec>;
        <cmd, V[2].inc>;
        <cmd>;
        <time, T. time>;
edon

with System do
    dead := any_s - src(any_t - self_epsilon);
    notResettable := any_s - coreach(initial, any_t);
    out0 := any_s & [V[2].rate = 0];
    out1 := any_s & [V[2].rate = 1];
    out2 := any_s & [V[2].rate = 2];
    dec21 := any_t & rsrc(out2) & rtgt(out1);
    dec10 := any_t & rsrc(out1) & rtgt(out0);
done