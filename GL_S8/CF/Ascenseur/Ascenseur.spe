/*
* Universal properties
*/
with Building do
  deadlock := any_s - src(any_t - self_epsilon);
  notResettable := any_s - coreach(initial,any_t);
done

/*
* Safety properties
* P : if "A" then "B"
* Plusieurs expressions de notP:
* 	    notP := A - B;
* 	    notP := A & ~B;
*	    notP := ~B - ~A;
*/

with Building do
/*
* P1 : "When a button is push, it lights."
* P1 : if "a button is push" then "it lights"
*/
A1 := label F[0].B.push;
B1 := [F[0].B.light];
notP1_V1 := tgt(A1) - B1;
notP1 := ((tgt(label F[0].B.push) - [F[0].B.light])|
          (tgt(label F[1].B.push) - [F[1].B.light])|
          (tgt(label F[2].B.push) - [F[2].B.light])|
          (tgt(label F[3].B.push) - [F[3].B.light])|
          (tgt(label L.B[0].push) - [L.B[0].light])|
          (tgt(label L.B[1].push) - [L.B[1].light])|
          (tgt(label L.B[2].push) - [L.B[2].light])|
          (tgt(label L.B[3].push) - [L.B[3].light]));
/*
* P2 : "When the corresponding service is done, it lights off."
* P2 : if "the corresponding service is done" then "it lights off"
* must be restrict to reachables
*/
notP2 := any_s &
         ((tgt(label F[0].D.close) & [request[0]])|
          (tgt(label F[1].D.close) & [request[1]])|
          (tgt(label F[2].D.close) & [request[2]])|
          (tgt(label F[3].D.close) & [request[3]]));
/*
* P3 : "At each floor, the door is close if the lift is not here."
* P3 : if "the lift is not at floor i" then "the door at floor i is closed"
* must be restrict to reachables
*/
notP3 := any_s &
         (([L.level != 0] - [F[0].D.closed])|
          ([L.level != 1] - [F[1].D.closed])|
          ([L.level != 2] - [F[2].D.closed])|
          ([L.level != 3] - [F[3].D.closed]));

done